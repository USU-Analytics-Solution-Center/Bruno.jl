var documenterSearchIndex = {"docs":
[{"location":"#Bruno.jl-Documentation","page":"Bruno.jl Documentation","title":"Bruno.jl Documentation","text":"","category":"section"},{"location":"","page":"Bruno.jl Documentation","title":"Bruno.jl Documentation","text":"Bruno.DataGeneration.ParamLogDiff\nBruno.DataGeneration.MovingBlockBootstrap\nBruno.DataGeneration.CircularBlockBootstrap\nBruno.DataGeneration.StationaryBootstrap\nBruno.DataGeneration.getData\nBruno.DataGeneration.getTime","category":"page"},{"location":"#Bruno.DataGeneration.getData","page":"Bruno.jl Documentation","title":"Bruno.DataGeneration.getData","text":"Description\n\ngetData is a function that generates data according to the parameter type\n\nSyntax\n\ndata = getData(Param)\ndata = getData(Param, nSimulation)\n\nPositional Inputs\n\nParam::DataGenerator: Parameters that describe the desired data generating process  \nnSimulation::Integer: nSimulation is the number of simulations to run.  \n\nPossible DataGenInput parameter types are\n\n::LogDiffInput - log-normal diffusion process \n::BootstrapInput{MovingBlock}\n::BootstrapInput{CircularBlock}\n::BootstrapInput{Stationary}\n\nDataGenInput parameter types can be constructed directly or with data_gen_input() function.\n\nOutputs\n\ndata::AbstractArray: nTimeStep x nSimulation Real valued array, where each column                        contains the data for one simulation, and each row contains                        data for each timestep\n\nExample\n\n# initialize parameters\nnTimeStep = 100\nParam1 = LogDiffInput(nTimeStep)\nParam2 = LogDiffInput(nTimeStep, volatility=0)\n\n# create two datasets, one with default values, the second with no volatility\ndata1 = getData(Param1)\ndata2 = getData(Param2)\n\n# create a third dataset with 100 simulation runs \nnSimulation = 100\ndata3 = getData(Param1,nSimulation)\n\n# plot results\nplt = plot(data3, show=true, color=\"blue\", legend=false)\nplot!(plt, data1, show=true, color=\"red\", legend=false, linewidth=3)\n\n\n\n\n\n","category":"function"},{"location":"#Bruno.DataGeneration.getTime","page":"Bruno.jl Documentation","title":"Bruno.DataGeneration.getTime","text":"Description\n\ngetTime is a function that generates a corresponding date-time array for data generated     with a ParamLogDiff input in getData\n\nSyntax\n\ndata = getTime(Param)\ndata = getTime(Param, initial)\n\nPositional Inputs\n\nParam::LogDiffInput: Parameters that describe the desired log-diffusion process  \ninitial::DateTime: The time that corresponds to the initial parameter in getData\n\nOutputs\n\ntime::Array{DateTime,2}: nStepSize x 1 DateTime array, where each value is the time                            for each row of data returned by getData.\n\nExample\n\nimport Plots.plot\nimport Plots.plot!\nusing Bruno.DataGeneration.LogDiffusion\n\n# initialize parameters\nnTimeStep = 100\nParam1 = ParamLogDiff(nTimeStep)\nParam2 = ParamLogDiff(nTimeStep, volatility=0)\n\n# create two datasets, one with default values, the second with no volatility\ndata1 = getData(Param1)\ndata2 = getData(Param2)\n\n# create a third dataset with 100 simulation runs \nnSimulation = 100\ndata3 = getData(Param1, nSimulation)\n\n# get time axis for each dataset\ntime1 = getTime(Param1)\ntime2 = getTime(Param2)\ntime3 = getTime(Param1)\n\n# plot results\nplt = plot(time3, data3, show=true, color=\"blue\", legend=false)\nplot!(plt, time1, data1, show=true, color=\"red\", legend=false, linewidth=3)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Bruno.jl Documentation","title":"Bruno.jl Documentation","text":"Documentation for Bruno.jl","category":"page"}]
}
