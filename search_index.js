var documenterSearchIndex = {"docs":
[{"location":"tutorials/fin_inst/derivatives/#Derivatives","page":"Derivatives","title":"Derivatives","text":"","category":"section"},{"location":"tutorials/fin_inst/derivatives/","page":"Derivatives","title":"Derivatives","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"reference/hedge_simulate/#Hedging-Simulations","page":"Hedging Simulations","title":"Hedging Simulations","text":"","category":"section"},{"location":"reference/hedge_simulate/","page":"Hedging Simulations","title":"Hedging Simulations","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/get_data/inputs/#Data-Generator-inputs","page":"Data Generator inputs","title":"Data Generator inputs","text":"","category":"section"},{"location":"tutorials/get_data/inputs/","page":"Data Generator inputs","title":"Data Generator inputs","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/getting_started/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorials/getting_started/introduction/","page":"Introduction","title":"Introduction","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"reference/pricing_models/#Pricing-Models","page":"Pricing Models","title":"Pricing Models","text":"","category":"section"},{"location":"reference/pricing_models/","page":"Pricing Models","title":"Pricing Models","text":"price!(::Any, ::Type{Any})\nprice!(::Option, ::Type{BlackScholes})\nprice!(::Option, ::Type{BinomialTree})\nprice!(::Option, ::Type{MonteCarlo{LogDiffusion}})","category":"page"},{"location":"reference/pricing_models/#Bruno.Models.price!-Tuple{Any, Type{Any}}","page":"Pricing Models","title":"Bruno.Models.price!","text":"price!(fin_obj<:CallOption, pricing_model::Type{<:Model};kwargs...)\n\nComputes the value of a given financial object. \n\nSyntax\n\nprice!(fin_obj, PricingModelType; kwargs...)\n\nkey word arguments vary depending on the Pricing Model Type.\n\nExample\n\n# create a base asset\na_stock = Stock(41; volatility=.3)\n\n# create a European call option \na_fin_inst = EuroCallOption(a_stock, 40; risk_free_rate=.05) \n\n# add binomial tree call value to the options value dictionary\nprice!(a_fin_inst, BinomialTree)  \n\n\n\n\n\n","category":"method"},{"location":"reference/pricing_models/#Bruno.Models.price!-Tuple{Option, Type{BlackScholes}}","page":"Pricing Models","title":"Bruno.Models.price!","text":"price!(fin_obj::Option, pricing_model::Type{BlackScholes})\n\nprice a European call or put option using the Black Scholes options pricing formula\n\nArguments\n\nfin_obj::Option: the call or put option to be priced \n\nExamples\n\nstock = Stock(41; volatility=.3)\ncall = EuroCallOption(stock, 40; risk_free_rate=.08, maturity=.25)\nprice!(call, BlackScholes)\n\n\n\n\n\n","category":"method"},{"location":"reference/pricing_models/#Bruno.Models.price!-Tuple{Option, Type{BinomialTree}}","page":"Pricing Models","title":"Bruno.Models.price!","text":"price!(fin_obj<:CallOption, pricing_model::Type{<:Model};kwargs...)\n\nComputes the value of a given financial object. \n\nSyntax\n\nprice!(fin_obj, PricingModelType; kwargs...)\n\nkey word arguments vary depending on the Pricing Model Type.\n\nExample\n\n# create a base asset\na_stock = Stock(41; volatility=.3)\n\n# create a European call option \na_fin_inst = EuroCallOption(a_stock, 40; risk_free_rate=.05) \n\n# add binomial tree call value to the options value dictionary\nprice!(a_fin_inst, BinomialTree)  \n\n\n\n\n\n","category":"method"},{"location":"reference/pricing_models/#Bruno.Models.price!-Tuple{Option, Type{MonteCarlo{LogDiffusion}}}","page":"Pricing Models","title":"Bruno.Models.price!","text":"price!(fin_obj::Option, MonteCarlo{MonteCarloModel}; kwargs...)\n\ncomputes the option price using Monte Carlo simulation methods with the MonteCarloModel  specified. Note: Only European Options call be priced via Monte Carlo methods. \n\nMonteCarloModel types:\n\nLogDiffusion\nMCBootstrap\n\nKeyword arguments\n\nFor LogDiffusion model\n\nn_sims::Int: Number of simulations to be run. Default 100.\nsim_size::Int: The number of generated steps in each simulated run. Default 100.\n\nFor MCBootstrap model\n\nn_sims::Int: Number of simulations to be run. Defualt 100\nbootstrap_method: block bootstrap method to be used. Must be a subtype of TSBootMethod. Defualt=Stationary\n\nExamples\n\nprices = [1,4,3,4,2,5,6,4,7,5];\nstock = Stock(prices);\ncall = EuroCallOption(stock, 8);\n\nprice!(call, MonteCarlo{LogDiffusion}; n_sims=50, sim_size=250)\nprice!(call, MonteCarlo{MCBootstrap}; bootstrap_method=CircularBlock, n_sims=10)\n\n\n\n\n\n","category":"method"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/pricing/derivatives/#Pricing-Options","page":"Pricing Options","title":"Pricing Options","text":"","category":"section"},{"location":"tutorials/pricing/derivatives/","page":"Pricing Options","title":"Pricing Options","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/pricing/futures/#Pricing-Futures","page":"Pricing Futures","title":"Pricing Futures","text":"","category":"section"},{"location":"tutorials/pricing/futures/","page":"Pricing Futures","title":"Pricing Futures","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/hedge/options/#Options-hedging","page":"Options hedging","title":"Options hedging","text":"","category":"section"},{"location":"tutorials/hedge/options/","page":"Options hedging","title":"Options hedging","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"manual/pricing_models/#Pricing-Models","page":"Pricing Models","title":"Pricing Models","text":"","category":"section"},{"location":"manual/pricing_models/","page":"Pricing Models","title":"Pricing Models","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/hedge/futures/#Futures-hedging","page":"Futures hedging","title":"Futures hedging","text":"","category":"section"},{"location":"tutorials/hedge/futures/","page":"Futures hedging","title":"Futures hedging","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"manual/types/#Type-System","page":"Type System","title":"Type System","text":"","category":"section"},{"location":"manual/types/","page":"Type System","title":"Type System","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"reference/data_generators/#Data-Generators","page":"Data Generators","title":"Data Generators","text":"","category":"section"},{"location":"reference/data_generators/#Inputs","page":"Data Generators","title":"Inputs","text":"","category":"section"},{"location":"reference/data_generators/","page":"Data Generators","title":"Data Generators","text":"DataGenInput\nLogDiffInput\nBootstrapInput","category":"page"},{"location":"reference/data_generators/#Bruno.DataGeneration.DataGenInput","page":"Data Generators","title":"Bruno.DataGeneration.DataGenInput","text":"abstract supertype for all data generation inputs to use with makedata() function.  Use subtypes(DataGenInput) for a list of all possible data generation inputs. \n\n\n\n\n\n","category":"type"},{"location":"reference/data_generators/#Bruno.DataGeneration.LogDiffInput","page":"Data Generators","title":"Bruno.DataGeneration.LogDiffInput","text":"LogDiffInput(nTimeStep, initial, volatility, drift)\nLogDiffInput(nTimeStep; kwargs...)\nLogDiffInput(;kwargs...)\n\ncontains parameters that are used by makedata() to synthesize data from a log-normal diffusion process of the form\n\nP_t+1 = P_t cdot e^drift + volatility cdot v\n\nwhere P_t is the value of the data at timestep t. The drift and  volatility represent the mean and standard deviation of a normal  distribution. The equation given above expresses them as such by  letting v be a draw from a standard normal distribution which is  then shifted and scaled by the drift and volatility terms\n\nArguments\n\nnTimeStep::Integer: nTimeStep is the number of time steps to synthesize.\ninitial::Real: initial is the assumed value at the 0th time step. Default: 100.\nvolatility::Real: volatility expresses the price volatility as a standard deviation per time step. Default: 9.3e-3\ndrift::Real: The drift parameter describes the mean of the log-normal diffusion process. Default 5.38e-4\n\nExample\n\ninput1 = LogDiffInput(250, 100, .05, .1)\n\n# initialize first input with default values\ninput2 = LogDiffInput(250)\n\n# initialize a second input with zero volatility\nkwargs = Dict(:nTimeStep=>250, :initial=>100, :volatility=>.05, :drift=>.1)\ninput3 = LogDiffInput(;kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"reference/data_generators/#Bruno.DataGeneration.BootstrapInput","page":"Data Generators","title":"Bruno.DataGeneration.BootstrapInput","text":"BootstrapInput(input_data, bootstrap_method::<:TSBootMethod; kwargs...)\nBootstrapInput{T <: TSBootMethod}(; kwargs...)\n\nContains the parameters needed to perform block bootstrap of type T to be used by makedata()  function. T can be any subtype of TSBootMethod: Stationary, MovingBlock, or CircularBlock.\n\nKeyword Arguments\n\ninput_data::Array{<:Real}: data to be resampled. Must be a 1-D array\nbootstrap_method: Type of time series bootstrap to use. Must be subtype of TSBootMethod.\nn::Integer: size of resampled output data. Default: 100\nblock_size::Integer: block size to use. Defaults to the optimal block length using opt_block_length()\n\nExamples\n\ninput_data = [1,2,4,3,5,7,6,3];\nkwargs = Dict(:n=>20);\ninput1 = BootstrapInput(input_data, Stationary; kwargs...)\n\nkwargs = Dict(:input_data=>input_data, :n=>20, :block_size=>4);\ninput2 = BootstrapInput{MovingBlock}(;kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"reference/data_generators/#makedata-function","page":"Data Generators","title":"makedata function","text":"","category":"section"},{"location":"reference/data_generators/","page":"Data Generators","title":"Data Generators","text":"makedata(::Any)","category":"page"},{"location":"reference/data_generators/#Bruno.DataGeneration.makedata-Tuple{Any}","page":"Data Generators","title":"Bruno.DataGeneration.makedata","text":"makedata(Input::LogDiffInput, nSimulation::Integer)\n\ngenerates data according to the DataGenInput struct provided\n\nPossible DataGenInput types are\n\n::LogDiffInput\n::BootstrapInput{MovingBlock}\n::BootstrapInput{CircularBlock}\n::BootstrapInput{Stationary}\n\nArguments\n\nInput<:DataGenInput:  struct with parameters to generate data\nnSimulation::Integer: the number of simulations to run.  \n\nOutputs\n\ndata::AbstractArray: nTimeStep x nSimulation Real valued array, where each column                        contains the data for one simulation, and each row contains                        data for each timestep\n\nExample\n\nnTimeStep = 100;\ninput1 = LogDiffInput(nTimeStep);\n\n# create a dataset using the log diffusion model\ndata1 = makedata(input1, 1)\n\n# create another dataset with 2 simulation runs using a startionary bootstrap \ninput2 = BootstrapInput(data1, Stationary; n=100);\ndata2 = makedata(input2, 2)\n\n\n\n\n\n","category":"method"},{"location":"reference/data_generators/#factory-function","page":"Data Generators","title":"factory function","text":"","category":"section"},{"location":"reference/data_generators/","page":"Data Generators","title":"Data Generators","text":"factory","category":"page"},{"location":"reference/data_generators/#Bruno.DataGeneration.factory","page":"Data Generators","title":"Bruno.DataGeneration.factory","text":"factory(widget::Widget, bootstrap_method::TSBootMethod, nWidgets::Signed)\n\nCreates nWidgets using a given bootstrap_method. If a widget of type \"Stock\" is passed in then the widget factory will use a given bootstrap method to produce n \"Stock\" widgets. All widgets use first difference.\n\nPositional Inputs\n\nwidget::Widget: A concrete widget struct. See the Widget documentation for more.\nbootstrap_method::TSBootMethod: A subtype of TSBootMethod: Stationary, MovingBlock, or CircularBlock.\nnWidgets::Signed: The amount of widgets you want widget factory to return.\n\nExample\n\nprices = [1,2,5,9,8,10,5,3];\nwidget = Stock(prices)\n\nlist_of_widgets = factory(widget, Stationary, 2)\n\n\n\n\n\n","category":"function"},{"location":"reference/data_generators/#Helper-functions","page":"Data Generators","title":"Helper functions","text":"","category":"section"},{"location":"reference/data_generators/","page":"Data Generators","title":"Data Generators","text":"opt_block_length(::Any, ::Type{<:TSBootMethod})","category":"page"},{"location":"reference/data_generators/#Bruno.DataGeneration.opt_block_length-Tuple{Any, Type{var\"#s1\"} where var\"#s1\"<:TSBootMethod}","page":"Data Generators","title":"Bruno.DataGeneration.opt_block_length","text":"opt_block_length(array, bootstrap_method::TSBootMethod)\n\nComputes the optimal block length for a time series block bootstrap using the methods defined  by Politis and White (2004). \n\nIf bootstrap method other than Stationary or CircularBlock is used, the function defaults  to CircularBlock\n\nExamples\n\nusing Distributions: Normal\n\n# create ar(1) data set\nar1 = [1.0];\nfor _ in 1:799\n    push!(ar1, ar1[end] * 0.7 + rand(Normal()))\n    end\n\n# find optimal block lengths\nst_bl = opt_block_length(ar1, Stationary)\ncb_bl = opt_block_length(ar1, CircularBlock)\n\n\n\n\n\n","category":"method"},{"location":"tutorials/getting_started/getting_started_with_julia/#Getting-started-with-Julia","page":"Getting started with Julia","title":"Getting started with Julia","text":"","category":"section"},{"location":"tutorials/getting_started/getting_started_with_julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"manual/hedge_simulate/#Hedging-Simulation","page":"Hedging Simulation","title":"Hedging Simulation","text":"","category":"section"},{"location":"manual/hedge_simulate/","page":"Hedging Simulation","title":"Hedging Simulation","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"manual/data_generators/#Data-Generation","page":"Data Generation","title":"Data Generation","text":"","category":"section"},{"location":"manual/data_generators/","page":"Data Generation","title":"Data Generation","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/getting_started/getting_started_with_Bruno/#Getting-started-with-Bruno","page":"Getting started with Bruno","title":"Getting started with Bruno","text":"","category":"section"},{"location":"tutorials/getting_started/getting_started_with_Bruno/","page":"Getting started with Bruno","title":"Getting started with Bruno","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/get_data/output/#Generating-Data","page":"Generating Data","title":"Generating Data","text":"","category":"section"},{"location":"tutorials/get_data/output/","page":"Generating Data","title":"Generating Data","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"tutorials/fin_inst/base_asset/#Base-Assets-(Widgets)","page":"Base Assets (Widgets)","title":"Base Assets (Widgets)","text":"","category":"section"},{"location":"tutorials/fin_inst/base_asset/","page":"Base Assets (Widgets)","title":"Base Assets (Widgets)","text":"Still in development. Documentation to come soon.","category":"page"},{"location":"reference/types/#Type-System","page":"Type System","title":"Type System","text":"","category":"section"},{"location":"reference/types/#Types","page":"Type System","title":"Types","text":"","category":"section"},{"location":"reference/types/#Base-Assets-(Widgets)","page":"Type System","title":"Base Assets (Widgets)","text":"","category":"section"},{"location":"reference/types/","page":"Type System","title":"Type System","text":"Widget\nStock\nCommodity\nBond","category":"page"},{"location":"reference/types/#Bruno.Instruments.Widget","page":"Type System","title":"Bruno.Instruments.Widget","text":"Widgets are the root asset at the heart of the package. A 'Widget' can be any  real world finicial object such as a stock, or commodity. For a list of possible subtypes  use subtypes(Widget)\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.Stock","page":"Type System","title":"Bruno.Instruments.Stock","text":"Stock <: Widget\n\nWidget subtype. Used as a base or root asset for FinancialInstrument\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.Commodity","page":"Type System","title":"Bruno.Instruments.Commodity","text":"Commodity <: Widget\n\nWidget subtype. Used as a base or root asset for FinancialInstrument\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.Bond","page":"Type System","title":"Bruno.Instruments.Bond","text":"Bond <: Widget\n\nWidget subtype. Used as a base or root asset for FinancialInstrument\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Financial-Instruments-(Derivatives)","page":"Type System","title":"Financial Instruments (Derivatives)","text":"","category":"section"},{"location":"reference/types/#Abstract-types","page":"Type System","title":"Abstract types","text":"","category":"section"},{"location":"reference/types/","page":"Type System","title":"Type System","text":"FinancialInstrument\nOption\nCallOption\nPutOption","category":"page"},{"location":"reference/types/#Bruno.Instruments.FinancialInstrument","page":"Type System","title":"Bruno.Instruments.FinancialInstrument","text":"FinancialInstrument is the supertype for any instrument that uses a base asset (widget) in its definition (like a financial derivative)\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.Option","page":"Type System","title":"Bruno.Instruments.Option","text":"Option <: FinancialInstrument\n\nabstract FinancialInstrument subtype. Supertype of all options contract types\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.CallOption","page":"Type System","title":"Bruno.Instruments.CallOption","text":"CallOption{T <: Widget} <: Option\n\nabstract Option subtype. Super type for all call options types\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.PutOption","page":"Type System","title":"Bruno.Instruments.PutOption","text":"PutOption{T <: Widget} <: Option\n\nabstract Option subtype. Super type for all put options types\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Concrete-types","page":"Type System","title":"Concrete types","text":"","category":"section"},{"location":"reference/types/","page":"Type System","title":"Type System","text":"Future\nEuroCallOption\nAmericanCallOption\nEuroPutOption\nAmericanPutOption","category":"page"},{"location":"reference/types/#Bruno.Instruments.Future","page":"Type System","title":"Bruno.Instruments.Future","text":"Future{T <: Widget} <: FinancialInstrument\n\nFuture contract with underlying asset T.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.EuroCallOption","page":"Type System","title":"Bruno.Instruments.EuroCallOption","text":"EuroCallOption{T <: Widget} <: CallOption{T}\n\nEuropean call option with underlying asset T. \n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.AmericanCallOption","page":"Type System","title":"Bruno.Instruments.AmericanCallOption","text":"AmericanCallOption{T <: Widget} <: CallOption{T}\n\nAmerican call option with underlying asset T. \n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.EuroPutOption","page":"Type System","title":"Bruno.Instruments.EuroPutOption","text":"EuroPutOption{T <: Widget} <: CallOption{T}\n\nEuropean put option with underlying asset T. \n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Bruno.Instruments.AmericanPutOption","page":"Type System","title":"Bruno.Instruments.AmericanPutOption","text":"AmericanPutOption{T <: Widget} <: CallOption{T}\n\nAmerican put option with underlying asset T. \n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Constructors","page":"Type System","title":"Constructors","text":"","category":"section"},{"location":"reference/types/#Base-Asset-Constructors","page":"Type System","title":"Base Asset Constructors","text":"","category":"section"},{"location":"reference/types/","page":"Type System","title":"Type System","text":"Stock(::Real)\nCommodity(::Real)\nBond(::Real)","category":"page"},{"location":"reference/types/#Bruno.Instruments.Stock-Tuple{Real}","page":"Type System","title":"Bruno.Instruments.Stock","text":"Stock(prices, name, volatility)\nStock(;kwargs)\nStock(price; kwargs)\n\nConstruct a Stock type to use as a base asset for FinancialInstrument.\n\nArguments\n\nprices:Historical prices (input as a 1-D array) or the current price input as a number <: Real\nname::String: Name of the stock or stock ticker symbol. Default \"\".\nvolatility: Return volatility, measured in the standard deviation of continuous returns.\n\nDefaults to using get_volatility() on the input prices array. Note: if a single number  is given for prices volatility must be given.\n\nExamples\n\nStock([1,2,3,4,5], \"Test\", .05)\n\nkwargs = Dict(:prices => [1, 2, 3, 4, 5], :name => \"Test\", :volatility => .05);\nStock(;kwargs...)\n\nStock(40; volatility=.05)\n\n\n\n\n\n","category":"method"},{"location":"reference/types/#Bruno.Instruments.Commodity-Tuple{Real}","page":"Type System","title":"Bruno.Instruments.Commodity","text":"Commodity(prices, name, volatility)\nCommodity(;kwargs)\nCommodity(price; kwargs)\n\nConstruct a Commodity type to use as a base asset for FinancialInstrument.\n\nArguments\n\nprices:Historical prices (input as a 1-D array) or the current price input as a number <: Real\nname::String: Name of the commodity or commodity ticker symbol. Default \"\".\nvolatility: Return volatility, measured in the standard deviation of continuous returns.\n\nDefaults to using get_volatility() on the input prices array. Note: if a single number  is given for prices volatility must be given.\n\nExamples\n\nCommodity([1,2,3,4,5], \"Test\", .05)\n\nkwargs = Dict(:prices => [1, 2, 3, 4, 5], :name => \"Test\", :volatility => .05);\nCommodity(;kwargs...)\n\nCommodity(40; volatility=.05)\n\n\n\n\n\n","category":"method"},{"location":"reference/types/#Bruno.Instruments.Bond-Tuple{Real}","page":"Type System","title":"Bruno.Instruments.Bond","text":"Bond(prices, name, time_mat, coupon_rate)\nBond(;kwargs)\nBond(price; kwargs)\n\nConstruct a Bond type to use as a base asset for FinancialInstrument.\n\nArguments\n\nprices:Historical prices (input as a 1-D array) or the current price input as a number <: Real\nname::String: Name of the Bond or issuing company. Default \"\".\ntime_mat: Time until the bond expires (matures) in years. Default 1.\ncoupon_rate: The coupon rate for the bond. Default .03.\n\nExamples\n\nBond([1,2,3,4,5], \"Test\", .5, .05)\n\nkwargs = Dict(:prices => [1, 2, 3, 4, 5], :name => \"Test\", :time_mat => .5, :coupon_rate => .05);\nBond(;kwargs...)\n\nBond(2; coupon_rate=.05)\n\n\n\n\n\n","category":"method"},{"location":"reference/types/#Financial-Instrument-Constructors","page":"Type System","title":"Financial Instrument Constructors","text":"","category":"section"},{"location":"reference/types/","page":"Type System","title":"Type System","text":"EuroCallOption(::Widget, ::Real)\nAmericanCallOption(::Widget, ::Real)\nEuroPutOption(::Widget, ::Real)\nAmericanPutOption(::Widget, ::Real)","category":"page"},{"location":"#Welcome-to-Bruno.jl!","page":"Welcome to Bruno.jl!","title":"Welcome to Bruno.jl!","text":"","category":"section"}]
}
